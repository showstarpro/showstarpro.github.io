<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pytorch</title>
    <link href="/2022/03/24/pytorch/"/>
    <url>/2022/03/24/pytorch/</url>
    
    <content type="html"><![CDATA[<h2 id="回归-vs-分类">回归 vs 分类</h2><p>回归估计一个连续值，单连续数值输出，自然区间R</p><p>分类估计一个离散值，通常为多输出，输出i为第i类的置信度 <span class="math display">\[\hat{y}_{i}=\frac{\exp \left(o_{i}\right)}{\sum_{k} \exp \left(o_{k}\right)}\]</span></p><h3 id="softmax回归">softmax回归</h3><p>softmax回归的输出层是一个全连接层。</p><h4 id="softmax运算符">softmax运算符</h4><p>softmax解决了输出层的输出值的范围不确定的问题；由于真实标签是离散值，这些离散值与不确定范围的输出值之间的误差难以衡量。</p><p>softmax将输出值变换成值为正且和为1的概率分布： <span class="math display">\[{\hat y}_1,{\hat y}_2,{\hat y}_3 = sfotmax(o_1,o_2,o_3)\]</span> 其中 <span class="math display">\[\hat{y}_{1}=\frac{\exp (o_1)}{\sum_{i=1}^{3} \exp \left(o_{i}\right)},\hat{y}_{1}=\frac{\exp (o_2)}{\sum_{i=1}^{3} \exp \left(o_{i}\right)},\hat{y}_{1}=\frac{\exp (o_3)}{\sum_{i=1}^{3} \exp \left(o_{i}\right)}\]</span> 容易看出<span class="math inline">\({\hat y}_1+{\hat y}_2+{\hat y}_3=1\)</span>且$0 <em>{1}, </em>{2}, _{3}  $.</p><p>softmax并不改变预测类别的输出结果。</p><h4 id="小批量样本分类的矢量计算表达式">小批量样本分类的矢量计算表达式</h4><p>为了进一步提升计算效率，通常对小批量数据进行矢量计算。</p><p>对于给定的一个小批量样本，其批量大小为n，输入个数（特征数）为d，输出个数（类别数）为q。设批量特征为<span class="math inline">\(\boldsymbol{X} \in \mathbb{R}^{n \times d}\)</span>。假设softmax回归的回归权重和偏差参数分别为<span class="math inline">\(\boldsymbol{W} \in \mathbb{R}^{d \times q}\)</span>和<span class="math inline">\(\boldsymbol{b} \in \mathbb{R}^{1 \times q}\)</span>。softmax回归的矢量计算表达式为 <span class="math display">\[\begin{array}{l}\boldsymbol{O}=\boldsymbol{X} \boldsymbol{W}+\boldsymbol{b} \\\hat{\boldsymbol{Y}}=\operatorname{softmax}(\boldsymbol{O})\end{array}\]</span></p><h4 id="交叉熵损失函数">交叉熵损失函数</h4><p>交叉熵损失函数思路：想要预测分类结果正确并不需要预测概率完全等于标签概率。而只需要正确的标签概率比其他的预测值都大就行。</p><p>改善的方法是使用更适合衡量两个概率分布差异的测试函数。其中，交叉熵（cross entropy）是一个常用的方法： <span class="math display">\[H\left(\boldsymbol{y}^{(i)}, \hat{\boldsymbol{y}}^{(i)}\right)=-\sum_{j=1}^{q} y_{j}^{(i)} \log \hat{y}_{j}^{(i)}\]</span> 其中带下标的<span class="math inline">\(y^{(i)}_j\)</span>是向量<span class="math inline">\(\boldsymbol y^{(i)}\)</span>中非0即1的元素，即是元素值。</p><p>交叉熵只关心对正确类别的预测概率，因为只要其值足够大，就可以确保分类结果正确。</p><p>假设训练数据集的样本数为n，交叉熵损失函数定义为 <span class="math display">\[\ell(\boldsymbol{\Theta})=\frac{1}{n} \sum_{i=1}^{n} H\left(\boldsymbol{y}^{(i)}, \hat{\boldsymbol{y}}^{(i)}\right)\]</span> 其中<span class="math inline">\(\boldsymbol{\Theta}\)</span>代表模型参数。</p><h2 id="图像分类数据集">图像分类数据集</h2>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>softmax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库2-关系代数</title>
    <link href="/2021/06/29/%E6%95%B0%E6%8D%AE%E5%BA%932-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"/>
    <url>/2021/06/29/%E6%95%B0%E6%8D%AE%E5%BA%932-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="关系模式">关系模式</h1><h2 id="数据结构">数据结构</h2><h3 id="关系">关系</h3><p>关系模式是型，是静态的、稳定的。而关系是关系模式的具体的值，是动态的、变化的</p><h3 id="候选码">候选码</h3><p>关系中的一组属性能够唯一的标识一个元组，而且这组属性任何一个属性去掉后都不能具有标识作用，则这组属性被称为候选码</p><h3 id="主码">主码</h3><p>从多个候选码中选一个作为标识，这个候选码被称为主码</p><h3 id="外码">外码</h3><p>参照关系R中的一个或一组属性F是被参照关系S中的主码，则F就是外码</p><h2 id="关系的完整性约束">关系的完整性约束</h2><h3 id="实体完整性">实体完整性</h3><p>关系中的主码不能为空</p><h3 id="参照完整性">参照完整性</h3><p>参照关系R上的外码F是被参照关系S上的主码，则F必须是空值或者是S中某个元组的主码值</p><p>在参照完整性中，如果外码F不是关系R上的主属性，则F可以为空。</p><h3 id="用户定义的完整性">用户定义的完整性</h3><p>反映了某一具体应用所设计的数据必须满足的语义要求。</p><hr><h1 id="关系代数">关系代数</h1><p>五个基本运算：并、差、选择、投影、笛卡尔积</p><p>常用的运算</p><table><thead><tr class="header"><th>运算</th><th>符号</th></tr></thead><tbody><tr class="odd"><td>选择</td><td>σ</td></tr><tr class="even"><td>投影</td><td>π</td></tr><tr class="odd"><td>连接</td><td>⋈</td></tr><tr class="even"><td>除</td><td>÷</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库1-绪论</title>
    <link href="/2021/06/29/%E6%95%B0%E6%8D%AE%E5%BA%931-%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/06/29/%E6%95%B0%E6%8D%AE%E5%BA%931-%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库基本概念">数据库基本概念</h1><h2 id="数据d">数据（D）</h2><p>定义：描述事务顶点符号记录</p><p>种类：数字、文字、图形、图像、音频、视频等</p><p>数据的含义称为数据的语义，数据与语义是不可分的。</p><h2 id="数据库db">数据库(DB)</h2><p>DB是<strong>长期存储</strong>在计算机内，<strong>有组织的</strong>、<strong>可共享的</strong> 、大量数据的集合。数据库中的数据按一定的数据模型组织、描述和存储，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户所共享。</p><h2 id="数据库管理系统dbms">数据库管理系统（DBMS)</h2><ol type="1"><li><p>DBMS是对数据库进行管理的大型软件，它是数据库系统的核心组成部分。DBMS是位于用户和操作系统之间的一层数据管理软件，和操作系统一样属于基础软件。</p></li><li><p>主要功能：</p><ol type="1"><li>数据定义功能</li><li>数据组织、存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li></ol></li></ol><h2 id="数据库系统dbs">数据库系统（DBS)</h2><p>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用系统和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。</p><h1 id="数据库的发展">数据库的发展</h1><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">人工管理</th><th style="text-align: center;">文件系统</th><th style="text-align: center;">数据库管理</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">应用背景</td><td style="text-align: center;">科学计算</td><td style="text-align: center;">科学计算、数据管理</td><td style="text-align: center;">大规模的数据管理</td></tr><tr class="even"><td style="text-align: center;">硬件背景</td><td style="text-align: center;">无直接存取的存储设备</td><td style="text-align: center;">硬盘、磁鼓</td><td style="text-align: center;">大容量磁盘、磁盘阵列</td></tr><tr class="odd"><td style="text-align: center;">软件背景</td><td style="text-align: center;">没有操作系统</td><td style="text-align: center;">有文件系统</td><td style="text-align: center;">有数据库管理系统</td></tr><tr class="even"><td style="text-align: center;">处理方式</td><td style="text-align: center;">批处理</td><td style="text-align: center;">联机实时处理、批处理</td><td style="text-align: center;">联机实时处理、批处理、分布处理</td></tr><tr class="odd"><td style="text-align: center;">数据的管理者</td><td style="text-align: center;">用户（程序员）</td><td style="text-align: center;">文件系统</td><td style="text-align: center;">数据库管理系统</td></tr><tr class="even"><td style="text-align: center;">数据面向的对象</td><td style="text-align: center;">某一项应用程序</td><td style="text-align: center;">某一应用</td><td style="text-align: center;">显示世界</td></tr><tr class="odd"><td style="text-align: center;">数据的共享程度</td><td style="text-align: center;">无共享、冗余程度大</td><td style="text-align: center;">共享性差、冗余度大</td><td style="text-align: center;"><strong>共享性高、冗余度小</strong></td></tr><tr class="even"><td style="text-align: center;">数据的独立性</td><td style="text-align: center;">不独立，完全依赖于程序</td><td style="text-align: center;">独立性差</td><td style="text-align: center;"><strong>具有较高的物理独立性和一定的逻辑独立性</strong></td></tr><tr class="odd"><td style="text-align: center;">数据的结构化</td><td style="text-align: center;">无结构</td><td style="text-align: center;">记录年内有结构化、整体无结构</td><td style="text-align: center;"><strong>整体结构化，用于数据模型描述</strong></td></tr><tr class="even"><td style="text-align: center;">数据的控制能力</td><td style="text-align: center;">应用程序自己控制</td><td style="text-align: center;">应用程序自己控制</td><td style="text-align: center;">由数据库管理系统提供数据的安全性、完整性、并发控制和恢复能力</td></tr></tbody></table><ol type="1"><li>数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是数据库系统和文件系统的本质区别。</li><li>数据库系统的三层视图：视图层、逻辑层和物理层。</li></ol><hr><hr><h1 id="数据模型">数据模型</h1><p>数据模型是一种模型，是一种对现实世界数据特征的抽象。</p><p>数据模型是数据库系统的核心和基础。</p><p>数据模型应满足三方面要求：</p><ol type="1"><li>能比较真实的模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ol><p>数据模型的组成要素：</p><ol type="1"><li>数据结构（<font color="red">静态特征</font>）：描述数据库的组成对象及对象之间的关系（<font color="red">静态特征</font>）</li><li>数据操作(<font color="red">动态特征</font>)：指数据库中各种对象的实例允许的操作的集合，包括操作及有关的操作规则</li><li>数据约束条件：是一组完整性规则的集合</li></ol><h2 id="概念模型信息模型">概念模型（信息模型）</h2><p>概念模型按照用户的观点来对数据和信息建模，用于数据库的设计。</p><p>概念模型是现实世界到机器世界的一个层次。</p><p>可以用E-R图（实体-联系图）表示st=&gt;start: 基本概念</p><p>基本概念</p><ol type="1"><li><p>实体</p></li><li><p>属性</p></li><li><p>码/建（key)</p></li><li><p>实体型</p></li><li><p>实体集</p></li><li><p>联系：实体之间的联系通常是指不同实体集之间的联系，实体之间的联系有一对一、一对多和多对多等多种类型。</p></li></ol><h2 id="逻辑模型">逻辑模型</h2><p>主要包括层次、网状、关系、面向对象和半结构化数据模型等，按计算机系统的观点对数据建模，用于DBMS实现。</p><blockquote><p>层次模型:用树型结构表示实体及实体间的联系的数据模型</p><blockquote><p>定义：</p><blockquote><ol type="1"><li>有且只有一个结点没有双亲结点，这个结点称为根结点</li><li>根以外的其他结点有且仅有一个双亲结点。</li></ol></blockquote><p>每个结点表示一个记录类型，记录类型之间的联系用结点之间的连线（<font color="red">有向边</font>)表示，这种连线是父子之间的一对多的联系。</p><p>操作：增、删、查、改</p><p>约束条件：</p><blockquote><ol type="1"><li>无相应的双亲结点值就不能插入子女的结点值</li><li>删除双亲结点，则相应的子女结点也同时删除</li><li>更新操作时，应更新所有相应记录，以保证数据的一致性</li></ol></blockquote><p>优点：</p><blockquote><ol type="1"><li>简单易用</li><li>自然表示1:M关系</li><li>速度较快</li></ol></blockquote><p>缺点：</p><blockquote><ol type="1"><li>不能直接表示m:n关系（须引入冗余结点）</li><li>插入、删除操作限制较多</li><li>在层次模型中有一定的存取路径，查子女须经过双亲（从上到下，从左到右：他仅允许自顶向下的单向查询，随机存取效率低）</li></ol></blockquote></blockquote><p>网状模型：用网状结构表示实体及实体间联系的数据模型</p><blockquote><p>表示方法：</p><blockquote><ol type="1"><li>一个结点表示一个实体</li><li>有向连线表示实体间联系</li><li>两个结点之间的联系不唯一，所以联系必须命名</li></ol></blockquote><p>特征：</p><blockquote><ol type="1"><li>可以有多个结点无父节点</li><li>至少有一个结点有多个父节点</li></ol></blockquote><p>优点：</p><blockquote><ol type="1"><li>直接表示m:n 联系</li><li>存取效率高</li></ol></blockquote><p>缺点：</p><blockquote><ol type="1"><li>结构复杂</li><li>DDL、DML复杂</li><li>一次存取一个记录值</li><li>应用程序与数据结构相互依赖，应用程序在访问数据时必须选择适当的存取路径</li></ol></blockquote><p>约束：</p><blockquote><ol type="1"><li>插入不受限制</li><li>删去双亲，子女不受影响</li></ol></blockquote></blockquote><p>关系模型：以集合论中的关系概念为基础发展起来的数据模型</p><blockquote><p>从用户角度来看，关系模型是用二维表格表示实体及其间联系的数据模型</p><p>一个关系就是没有重复行和重复列的二维表</p><p>关系模型要求关系必须是规范的，关系中的每一个分量必须是一个不可分的数据项，不允许表中还有表。</p><p>数据操作时集合操作，操作对象和操作结果都是关系，即若干元组的集：查询、插入、删除、更新。</p><p>存取路径对用户隐蔽</p><p>关系的完整性约束条件：</p><blockquote><ol type="1"><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ol></blockquote><p>优点：</p><blockquote><ol type="1"><li>建立在严格的数学概念的基础上</li><li>概念单一:实体和各类联系都用关系来表示；对数据的检索结果也是关系</li><li>关系模型的存取路径对用户透明：具有更高的数据独立性，更好的安全保密性；简化了程序员的工作和数据库开发建立的工作</li></ol></blockquote><p>缺点：</p><blockquote><ol type="1"><li>存取路径对用户透明导致查询效率往往不如非关系数据模型</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发DBMS的难度</li></ol></blockquote></blockquote></blockquote><h2 id="物理模型">物理模型</h2><p>物理模型是对数局最底层的抽象，描述数据库系统内部的表示方式和存取方法，或在磁盘或磁带上的存储方式和存取方法。</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 现实世界<br>f1=&gt;operation: 信息世界：概念模型<br>f2=&gt;operation: 机器世界：数据库管理系统支持的数据模型<br>st-&gt;f1-&gt;f2<br></code></pre></td></tr></table></figure><hr><h1 id="数据库系统结构">数据库系统结构</h1><p>在数据模型中有“型”和“值”的概念。型是对某一类数据的结构和属性的说明，类是型的一个具体赋值。</p><h2 id="模式">模式</h2><p>数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图</p><p>仅仅是型的描述，与具体的值无关。</p><p>反映的是数据的结构及其联系</p><p>模式是相对稳定的</p><h2 id="实例">实例</h2><p>实例是模式的一个具体的值；反映数据库某一时刻的状态。</p><p>同一个模式可以有很多的实例；</p><p>实例随数据库中的数据的更新而变动</p><h2 id="三级模式结构">三级模式结构</h2><h3 id="外模式">外模式</h3><p>外模式也称为子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是某一应用有关的数据的逻辑表示。</p><p>定义在逻辑模式之上，独立于存储模式和存储设备。</p><p>设计外模式要考虑到应用的扩充性</p><p>地位：介于模式和应用之间</p><p>模式与外模式的关系：1：m</p><p>外模式与应用的关系：1:m</p><p>用途：</p><ol type="1"><li>支持不同用户建立适应局部应用特征的结构，每个用户只能看见和访问所对应的外模式中的数据</li><li>简化应用处理</li><li>提高安全性，保证数据库安全性的一个有力措施</li></ol><h3 id="模式-1">模式</h3><p>模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p><p>地位: 是数据库系统模式结构的中间层，独立于数据库的其他层次。</p><blockquote><ol type="1"><li>与数据的物理存储细节和硬件环境无关</li><li>与具体的应用程序、开发工具及高级程序设计语言无关</li></ol></blockquote><h3 id="内模式">内模式</h3><p>内模式是数据物理结构和存储方式的描述</p><p>是数据在数据库内部的表示方式</p><p>一个数据库只有一个内模式</p><hr><p>三级模式：</p><table><thead><tr class="header"><th>外模式</th><th>模式</th><th>内模式</th></tr></thead><tbody><tr class="odd"><td>概念模式的某一部分的抽象表示，反映的是数据的<font color="red">存储观</font></td><td>是整个数据库的抽象表示，反映的数据库的<font color="red">全局观</font></td><td>整个数据库的实际存储表示，反映的是数据的<font color="red">存储观</font></td></tr></tbody></table><h2 id="二级映像">二级映像</h2><h4 id="外模式模式映像">外模式/模式映像</h4><p>定义某一个外模式和模式之间的对应关系。</p><p>作用：保证数据的逻辑独立性</p><h4 id="模式内模式映像">模式/内模式映像</h4><p>定义了数据全局逻辑结构与存储结构之间的对应关系</p><p>数据库中模式/内模式映像是惟一的</p><p>作用：保证数据的物理独立性</p><hr><h3 id="三级模式的优点">三级模式的优点</h3><ol type="1"><li>保证数据的独立性</li><li>简化了用户接口</li><li>有利于数据共享</li><li>利于数据的安全保密</li></ol><h1 id="数据库的组成">数据库的组成</h1><h3 id="硬件平台及数据库">硬件平台及数据库</h3><p>要求：</p><ol type="1"><li>足够大的内存</li><li>足够大的外存</li><li>较高的通道能力，以提高数据传送率</li></ol><h3 id="软件">软件</h3><ol type="1"><li>DBMS</li><li>支持DBMS运行的操作系统</li><li>与数据库接口的高级语言及其编译系统</li><li>以DBMS为核心的应用开发工具</li><li>为特定应用环境开发的数据库应用系统</li></ol><h3 id="人员">人员</h3><ol type="1"><li>DBA</li><li>系统分析员</li><li>数据库设计人员</li><li>应用程序员</li><li>用户</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理2-文法和语言</title>
    <link href="/2021/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862-%E6%96%87%E6%B3%95%E5%92%8C%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862-%E6%96%87%E6%B3%95%E5%92%8C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="文法">文法</h1><h2 id="型文法">0型文法</h2><p>产生式的左部至少有一个非终结符</p><h2 id="型文法-1">1型文法</h2><p>产生式的左部至少有一个非终结符且左部的长度小于等于右边的长度。又叫上下文有关文法。</p><h2 id="型文法-2">2型文法</h2><p>产生式的左部有且仅有一个非终结符。又叫上下文无关文法。</p><h2 id="型文法-3">3型文法</h2><p>产生式的左部有且仅有一个非终结符，右边是a或者aB或空规则。</p><h2 id="规范推导和规范规约">规范推导和规范规约</h2><p>最右推导是规范推导</p><p>最左规约是规范规约</p><h2 id="句型句子">句型、句子、</h2><p>推导过程中产生的每一步都是一个句型；推导中产生的全由终结符构成的句型是句子。</p><h2 id="短语直接短语句柄">短语、直接短语、句柄</h2><p>在语法树中，每一个能够由全部是终结符的后代构成的结点就有短语，其短语是终结符；</p><p>直接短语是指能够由一步推导得到的短语；最左直接短语就是句柄。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>大三下学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/2021/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2021/06/22/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是编译程序">什么是编译程序？</h1><p>编译程序是把一种语言编写的程序（源程序）翻译成等价的另一种语言程序（目标程序）的程序。</p><h1 id="编译程序的构成成分">编译程序的构成成分</h1><h2 id="词法分析">词法分析</h2><p>词法分析：扫描字符串表示的源程序，根据词法规则识别出具有独立意义的单词符号，输出单词符号流。</p><h2 id="语法分析">语法分析</h2><p>根据语法规则，把单词符号流分解成语法短语（又叫语法单位），可表示成语法树。</p><h2 id="语义分析">语义分析</h2><p>对语法成分的类型、含义进行检查，以保证程序各部分能有机地结合在一起，并为以后生成目标代码收集必要的信息，如类型、目标地址等。</p><h2 id="中间代码生成">中间代码生成</h2><p>将源程序转换为一种结构简单、含义明确的中间表示形式，以便进一步转换成目标代码。</p><h2 id="代码优化">代码优化</h2><p>对中间代码进行改进以获得更高效的代码：占用空间少、运行速度快。</p><h2 id="目标代码生成">目标代码生成</h2><p>将中间代码转换成特定机器上的目标代码。</p><h2 id="表格管理">表格管理</h2><p>编译过程中的各种信息都被保存在不同的表格里，编译各阶段都涉及建立、查找和更新有关表格。</p><h2 id="错误处理程序">错误处理程序</h2><p>报告编译各阶段发生的错误性质和发生错误的语句，并将错误造成的影响限制在尽可能小的范围内，使编译程序能够继续处理源程序的剩下部分。</p><h1 id="编译程序的划分">编译程序的划分</h1><h2 id="前端">前端</h2><p>编译系统的前端由于源程序有关而与目标机器无关的部分组成，通常包括词法分析、语法分析、语义分析，中间代码生成、符号表的建立以及与机器无关的代码优化工作，当然前端也包括相应的错误处理和符号表达管理。</p><h2 id="后端">后端</h2><p>后端由编译程序中与目标机器有关的部分组成，一般来讲，这些部分与源语言无关而仅依赖于中间代码。后端包括目标代码的生成，与机器有关的代码优化以及相应的错误处理和符号表的管理。</p><h1 id="遍">遍</h1><p>编译程序的遍是指对源程序或基于中间表示形式从头到尾扫描一次，并在扫描过程中作相关的加工处理，生成新的中间表示形式或目标程序。</p><h1 id="解释程序和编译程序">解释程序和编译程序</h1><p>解释程序是解释、执行高级语言源程序的程序。编译程序是把高级语言编写的程序翻译成某种机器的汇编语言或者机器语言的程序。</p><p>不同：</p><p>编译程序把源程序翻译成等价的目标程序（只翻译，不执行），此后目标程序的运行不再依赖于编译程序。</p><p>解释程序是边翻译（解释）边执行，不产生目标代码，直接输出源程序的运行结果。源程序的每一次运行都离不开解释程序。</p>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的使用</title>
    <link href="/2021/06/10/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/06/10/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简单的使用">简单的使用</h2><h3 id="创建文章">创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;new page&quot;</span><br></code></pre></td></tr></table></figure><h3 id="本地预览">本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><h3 id="上传到github">上传到github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
